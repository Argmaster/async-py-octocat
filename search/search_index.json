{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Async PyOctocat is a Python library for asynchronous interaction with GitHub API. I was pushed to create this library by the lack of an actively maintained and well documented asynchronous library that would allow quick and efficient high-level interaction with Github from code. I sincerely hope that one day this library can be said to be actively maintained and well documented. Install # 1 pip install async_py_octocat Features # Due to the extensiveness of the Github API, functionalities require incremental implementation, and at this point PyOctocat is far from having all endpoints finished. Check Features Status section in our documentation to learn about features which are already available. Example # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import asyncio from async_py_octocat import GitHub gh_username : str = \"Your Username\" gh_token_full : str = \"ghp_...\" # your token async def main (): async with GitHub ( gh_username , gh_token_full ) as client : # by default .user() method returns currently authenticated user currently_authenticated = await client . user () print ( currently_authenticated ) # to get other user just pass username as first argument other_user = await client . user ( \"Other User name\" ) print ( other_user ) # to download repository owned by some user you can use # previously acquired User object repo = await currently_authenticated . repository ( \"repo_name\" ) print ( repo ) if __name__ == \"__main__\" : asyncio . run ( main ()) For full tutorial check out Quick Start section in our docs. Documentation # Online documentation is available at argmaster.github.io/async-py-octocat/ To build docs locally run 1 tox -e docs","title":"Overview"},{"location":"#install","text":"1 pip install async_py_octocat","title":"Install"},{"location":"#features","text":"Due to the extensiveness of the Github API, functionalities require incremental implementation, and at this point PyOctocat is far from having all endpoints finished. Check Features Status section in our documentation to learn about features which are already available.","title":"Features"},{"location":"#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import asyncio from async_py_octocat import GitHub gh_username : str = \"Your Username\" gh_token_full : str = \"ghp_...\" # your token async def main (): async with GitHub ( gh_username , gh_token_full ) as client : # by default .user() method returns currently authenticated user currently_authenticated = await client . user () print ( currently_authenticated ) # to get other user just pass username as first argument other_user = await client . user ( \"Other User name\" ) print ( other_user ) # to download repository owned by some user you can use # previously acquired User object repo = await currently_authenticated . repository ( \"repo_name\" ) print ( repo ) if __name__ == \"__main__\" : asyncio . run ( main ()) For full tutorial check out Quick Start section in our docs.","title":"Example"},{"location":"#documentation","text":"Online documentation is available at argmaster.github.io/async-py-octocat/ To build docs locally run 1 tox -e docs","title":"Documentation"},{"location":"changelog/","text":"Changelog # All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.0.0] - 2022-07-03 # Added GitHub client object for managing session and basic interaction with Github API Added User wrapper for accessing details of authorized and other users and fetching associated data Added Repository wrapper for accessing details of repositories owned by users","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#000-2022-07-03","text":"Added GitHub client object for managing session and basic interaction with Github API Added User wrapper for accessing details of authorized and other users and fetching associated data Added Repository wrapper for accessing details of repositories owned by users","title":"[0.0.0] - 2022-07-03"},{"location":"features_status/","text":"Features status # Symbol Glossary # Symbol Meaning \u2705 Available in last stable release \u23ef\ufe0f Coming in next stable release \u274c Not available any time soon unless by community PR Missing features You desperately need a feature which is not in the tables below? You may decide to add it yourself and create a pull request, your help in developing this project will be gladly welcomed. Commits # API functionality status List commits \u23ef\ufe0f List branches for HEAD commit \u274c List pull requests associated with a commit \u23ef\ufe0f Get a commit \u23ef\ufe0f Compare two commits \u274c Commit comments # API functionality status Get a commit comment \u274c Update a commit comment \u274c Delete a commit comment \u274c List commit comments \u274c Create a commit comment \u274c Commit statuses # API functionality status Get the combined status for a specific reference \u274c List commit statuses for a reference \u274c Create a commit status \u274c Pull Requests # API functionality status List pull requests \u23ef\ufe0f Create a pull request \u274c Get a pull request \u23ef\ufe0f Update a pull request \u274c List commits on a pull request \u23ef\ufe0f List pull requests files \u274c Check if a pull request has been merged \u23ef\ufe0f Merge a pull request \u274c Update a pull request branch \u274c Repositories # API functionality status List organization repositories \u274c Create an organization repository \u274c Get a repository \u2705 Update a repository \u274c Delete a repository \u274c Enable automated security fixes \u274c Disable automated security fixes \u274c List CODEOWNERS errors \u274c List repository contributors \u274c Create a repository dispatch event \u274c List repository languages \u274c List repository tags \u274c List repository teams \u274c Get all repository topics \u274c Replace all repository topics \u274c Transfer a repository \u274c Check vulnerability alerts \u274c Enable vulnerability alerts \u274c Disable vulnerability alerts \u274c Create a repository using a template \u274c List public repositories \u274c List repositories for the authenticated user \u274c Create a repository for the authenticated user \u274c List repositories for a user \u274c Repositories - Autolinks # API functionality status List all autolinks of a repository \u274c Create an autolink reference \u274c Get an autolink reference \u274c Delete an autolink reference \u274c Repositories - Contents # API functionality status Get repository content \u23ef\ufe0f Create or update file contents \u274c Delete a file \u274c Get a repository README \u274c Get a repository README for a directory \u274c Download a repository archive \u274c Repositories - Forks # API functionality status List forks \u274c Create a fork \u274c Repositories - Tags # API functionality status List tag protection states \u274c Create tag protection state \u274c Delete tag protection state \u274c Users # API functionality status Get the authenticated user \u2705 Update the authenticated user \u274c List users \u23ef\ufe0f Get a user \u2705 Get contextual information for a user \u274c","title":"Features Status"},{"location":"features_status/#features-status","text":"","title":"Features status"},{"location":"features_status/#symbol-glossary","text":"Symbol Meaning \u2705 Available in last stable release \u23ef\ufe0f Coming in next stable release \u274c Not available any time soon unless by community PR Missing features You desperately need a feature which is not in the tables below? You may decide to add it yourself and create a pull request, your help in developing this project will be gladly welcomed.","title":"Symbol Glossary"},{"location":"features_status/#commits","text":"API functionality status List commits \u23ef\ufe0f List branches for HEAD commit \u274c List pull requests associated with a commit \u23ef\ufe0f Get a commit \u23ef\ufe0f Compare two commits \u274c","title":"Commits"},{"location":"features_status/#commit-comments","text":"API functionality status Get a commit comment \u274c Update a commit comment \u274c Delete a commit comment \u274c List commit comments \u274c Create a commit comment \u274c","title":"Commit comments"},{"location":"features_status/#commit-statuses","text":"API functionality status Get the combined status for a specific reference \u274c List commit statuses for a reference \u274c Create a commit status \u274c","title":"Commit statuses"},{"location":"features_status/#pull-requests","text":"API functionality status List pull requests \u23ef\ufe0f Create a pull request \u274c Get a pull request \u23ef\ufe0f Update a pull request \u274c List commits on a pull request \u23ef\ufe0f List pull requests files \u274c Check if a pull request has been merged \u23ef\ufe0f Merge a pull request \u274c Update a pull request branch \u274c","title":"Pull Requests"},{"location":"features_status/#repositories","text":"API functionality status List organization repositories \u274c Create an organization repository \u274c Get a repository \u2705 Update a repository \u274c Delete a repository \u274c Enable automated security fixes \u274c Disable automated security fixes \u274c List CODEOWNERS errors \u274c List repository contributors \u274c Create a repository dispatch event \u274c List repository languages \u274c List repository tags \u274c List repository teams \u274c Get all repository topics \u274c Replace all repository topics \u274c Transfer a repository \u274c Check vulnerability alerts \u274c Enable vulnerability alerts \u274c Disable vulnerability alerts \u274c Create a repository using a template \u274c List public repositories \u274c List repositories for the authenticated user \u274c Create a repository for the authenticated user \u274c List repositories for a user \u274c","title":"Repositories"},{"location":"features_status/#repositories-autolinks","text":"API functionality status List all autolinks of a repository \u274c Create an autolink reference \u274c Get an autolink reference \u274c Delete an autolink reference \u274c","title":"Repositories - Autolinks"},{"location":"features_status/#repositories-contents","text":"API functionality status Get repository content \u23ef\ufe0f Create or update file contents \u274c Delete a file \u274c Get a repository README \u274c Get a repository README for a directory \u274c Download a repository archive \u274c","title":"Repositories - Contents"},{"location":"features_status/#repositories-forks","text":"API functionality status List forks \u274c Create a fork \u274c","title":"Repositories - Forks"},{"location":"features_status/#repositories-tags","text":"API functionality status List tag protection states \u274c Create tag protection state \u274c Delete tag protection state \u274c","title":"Repositories - Tags"},{"location":"features_status/#users","text":"API functionality status Get the authenticated user \u2705 Update the authenticated user \u274c List users \u23ef\ufe0f Get a user \u2705 Get contextual information for a user \u274c","title":"Users"},{"location":"license/","text":"Copyright 2022 Krzysztof Wi\u015bniewski argmaster.world@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"quick_start/","text":"Quick Start # Welcome to quick start section. We will explain here how to get started using the PyOctocat library. Great efforts have been made to make the API as high-level, readable and intuitive as possible. Overall, we are happy with the results and hope that the behavior of this library will also appeal to users. Creating a GitHub client # As library name implies, PyOctocat is mainly designed to be asynchronous library and thus requires code to be run in async functions. Therefore basic template which will be used for rest of this tutorial looks following way: 1 2 3 4 5 6 7 8 9 import asyncio async def main (): ... if __name__ == \"__main__\" : raise SystemExit ( asyncio . run ( main ())) All executable code goes into async def main () function shown above. Imports can be still kept at the top of the file (and it is recommended). To begin with using PyOctocat, you will have to create instance of GitHub object, which takes username and github token as arguments. It will be used to acquire objects from Github API and control session availability. 1 2 3 4 5 6 7 8 9 10 11 import asyncio from async_py_octocat import GitHub async def main (): gh = GitHub ( \"username\" , \"ghp_...\" ) ... if __name__ == \"__main__\" : raise SystemExit ( asyncio . run ( main ())) Interacting with Github API # Important ALL interaction with Github API (sending and receiving data) can only be done withing async with block in async function. All interaction, requiring internet access, outside async with , will either fail or finish with unexpected results. 1 2 3 4 5 6 7 8 9 10 11 12 import asyncio from async_py_octocat import GitHub async def main (): gh = GitHub ( \"username\" , \"ghp_...\" ) async with gh as client : ... if __name__ == \"__main__\" : raise SystemExit ( asyncio . run ( main ())) At this point we can acquire user information via Github API with call to .user(...) function. When called with no arguments, it will return currently authenticated user, otherwise expects string containing user name and returns wrapper object containing details acquired from API. 1 2 3 4 5 6 7 8 9 10 11 12 import asyncio from async_py_octocat import GitHub async def main (): gh = GitHub ( \"username\" , \"ghp_...\" ) async with gh as client : user = client . user ( \"Argmaster\" ) ... if __name__ == \"__main__\" : raise SystemExit ( asyncio . run ( main ())) Having the user object, we can get the repository of which he is the owner. We do this by using the repository() method, which takes the name of the repository as an argument. 1 2 3 4 5 6 7 8 9 10 11 12 13 import asyncio from async_py_octocat import GitHub async def main (): gh = GitHub ( \"username\" , \"ghp_...\" ) async with gh as client : user = await client . user ( \"Argmaster\" ) repo = await user . repository ( \"repo_name\" ) ... if __name__ == \"__main__\" : raise SystemExit ( asyncio . run ( main ())) Info Your next steps depend on your needs, unfortunately rest of API is currently not implemented. Hopefully, in the next release we will put in your hands the tools to use the data contained in the repository.","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"Welcome to quick start section. We will explain here how to get started using the PyOctocat library. Great efforts have been made to make the API as high-level, readable and intuitive as possible. Overall, we are happy with the results and hope that the behavior of this library will also appeal to users.","title":"Quick Start"},{"location":"quick_start/#creating-a-github-client","text":"As library name implies, PyOctocat is mainly designed to be asynchronous library and thus requires code to be run in async functions. Therefore basic template which will be used for rest of this tutorial looks following way: 1 2 3 4 5 6 7 8 9 import asyncio async def main (): ... if __name__ == \"__main__\" : raise SystemExit ( asyncio . run ( main ())) All executable code goes into async def main () function shown above. Imports can be still kept at the top of the file (and it is recommended). To begin with using PyOctocat, you will have to create instance of GitHub object, which takes username and github token as arguments. It will be used to acquire objects from Github API and control session availability. 1 2 3 4 5 6 7 8 9 10 11 import asyncio from async_py_octocat import GitHub async def main (): gh = GitHub ( \"username\" , \"ghp_...\" ) ... if __name__ == \"__main__\" : raise SystemExit ( asyncio . run ( main ()))","title":"Creating a GitHub client"},{"location":"quick_start/#interacting-with-github-api","text":"Important ALL interaction with Github API (sending and receiving data) can only be done withing async with block in async function. All interaction, requiring internet access, outside async with , will either fail or finish with unexpected results. 1 2 3 4 5 6 7 8 9 10 11 12 import asyncio from async_py_octocat import GitHub async def main (): gh = GitHub ( \"username\" , \"ghp_...\" ) async with gh as client : ... if __name__ == \"__main__\" : raise SystemExit ( asyncio . run ( main ())) At this point we can acquire user information via Github API with call to .user(...) function. When called with no arguments, it will return currently authenticated user, otherwise expects string containing user name and returns wrapper object containing details acquired from API. 1 2 3 4 5 6 7 8 9 10 11 12 import asyncio from async_py_octocat import GitHub async def main (): gh = GitHub ( \"username\" , \"ghp_...\" ) async with gh as client : user = client . user ( \"Argmaster\" ) ... if __name__ == \"__main__\" : raise SystemExit ( asyncio . run ( main ())) Having the user object, we can get the repository of which he is the owner. We do this by using the repository() method, which takes the name of the repository as an argument. 1 2 3 4 5 6 7 8 9 10 11 12 13 import asyncio from async_py_octocat import GitHub async def main (): gh = GitHub ( \"username\" , \"ghp_...\" ) async with gh as client : user = await client . user ( \"Argmaster\" ) repo = await user . repository ( \"repo_name\" ) ... if __name__ == \"__main__\" : raise SystemExit ( asyncio . run ( main ())) Info Your next steps depend on your needs, unfortunately rest of API is currently not implemented. Hopefully, in the next release we will put in your hands the tools to use the data contained in the repository.","title":"Interacting with Github API"},{"location":"develop/docs/","text":"Documentation # Handy links # Markdownguide.org Basic Syntax Markdownguide.org Extended Syntax MkDocs-Material Reference MkDocs # MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introductory tutorial, then check the User Guide for more information. Main webpage User guide We are also using Material for MkDocs theme for documentation which is a separate package. Main webpage Reference 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit. Commands: build Build the MkDocs documentation gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server Live server # Runs development server, which automatically mirrors changes in source code. Development server is by default available at http://127.0.0.1:8000/ 1 mkdocs serve Full CLI help: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 Usage: mkdocs serve [OPTIONS] Run the builtin development server Options: -a, --dev-addr <IP:PORT> IP address and port to serve documentation locally (default: localhost:8000) --livereload Enable the live reloading in the development server (this is the default) --no-livereload Disable the live reloading in the development server. --dirtyreload Enable the live reloading in the development server, but only re-build files that have changed --watch-theme Include the theme in list of files to watch for live reloading. Ignored when live reload is not used. -f, --config-file FILENAME Provide a specific MkDocs config -s, --strict Enable strict mode. This will cause MkDocs to abort the build on any warnings. -t, --theme [material|mkdocs|readthedocs] The theme to use when building your documentation. --use-directory-urls / --no-directory-urls Use directory URLs when building pages (the default). -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit. Build documentation # Builds documentation, all generated files are by default saved to site/ folder. 1 mkdocs build Full CLI help: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Usage: mkdocs build [OPTIONS] Build the MkDocs documentation Options: -c, --clean / --dirty Remove old files from the site_dir before building (the default). -f, --config-file FILENAME Provide a specific MkDocs config -s, --strict Enable strict mode. This will cause MkDocs to abort the build on any warnings. -t, --theme [mkdocs|material|readthedocs] The theme to use when building your documentation. --use-directory-urls / --no-directory-urls Use directory URLs when building pages (the default). -d, --site-dir PATH The directory to output the result of the documentation build. -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit.","title":"Documentation"},{"location":"develop/docs/#documentation","text":"","title":"Documentation"},{"location":"develop/docs/#handy-links","text":"Markdownguide.org Basic Syntax Markdownguide.org Extended Syntax MkDocs-Material Reference","title":"Handy links"},{"location":"develop/docs/#mkdocs","text":"MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introductory tutorial, then check the User Guide for more information. Main webpage User guide We are also using Material for MkDocs theme for documentation which is a separate package. Main webpage Reference 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Usage: mkdocs [OPTIONS] COMMAND [ARGS]... MkDocs - Project documentation with Markdown. Options: -V, --version Show the version and exit. -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit. Commands: build Build the MkDocs documentation gh-deploy Deploy your documentation to GitHub Pages new Create a new MkDocs project serve Run the builtin development server","title":"MkDocs"},{"location":"develop/docs/#live-server","text":"Runs development server, which automatically mirrors changes in source code. Development server is by default available at http://127.0.0.1:8000/ 1 mkdocs serve Full CLI help: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 Usage: mkdocs serve [OPTIONS] Run the builtin development server Options: -a, --dev-addr <IP:PORT> IP address and port to serve documentation locally (default: localhost:8000) --livereload Enable the live reloading in the development server (this is the default) --no-livereload Disable the live reloading in the development server. --dirtyreload Enable the live reloading in the development server, but only re-build files that have changed --watch-theme Include the theme in list of files to watch for live reloading. Ignored when live reload is not used. -f, --config-file FILENAME Provide a specific MkDocs config -s, --strict Enable strict mode. This will cause MkDocs to abort the build on any warnings. -t, --theme [material|mkdocs|readthedocs] The theme to use when building your documentation. --use-directory-urls / --no-directory-urls Use directory URLs when building pages (the default). -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit.","title":"Live server"},{"location":"develop/docs/#build-documentation","text":"Builds documentation, all generated files are by default saved to site/ folder. 1 mkdocs build Full CLI help: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Usage: mkdocs build [OPTIONS] Build the MkDocs documentation Options: -c, --clean / --dirty Remove old files from the site_dir before building (the default). -f, --config-file FILENAME Provide a specific MkDocs config -s, --strict Enable strict mode. This will cause MkDocs to abort the build on any warnings. -t, --theme [mkdocs|material|readthedocs] The theme to use when building your documentation. --use-directory-urls / --no-directory-urls Use directory URLs when building pages (the default). -d, --site-dir PATH The directory to output the result of the documentation build. -q, --quiet Silence warnings -v, --verbose Enable verbose output -h, --help Show this message and exit.","title":"Build documentation"},{"location":"develop/feature/","text":"Feature flow # This project uses GitHub flow as it's main workflow model. Simplified visualization can be seen on graph below: %%{init: { 'theme': 'forest' , 'themeVariables': { 'git0': '#4db85f', 'git1': '#49b391', 'git2': '#59a7ff', 'git3': '#d93261', 'git4': '#00ffff', 'git5': '#ffff00', 'git6': '#ff00ff', 'git7': '#00ffff' } } }%% gitGraph commit tag:\"0.0.0\" branch feature checkout feature branch private checkout private commit commit checkout feature merge private branch private2 checkout private2 commit commit checkout feature merge private2 commit tag:\"1.0.0\" checkout main merge feature Clone repository # Hint You can skip this step if you already have a clone 1 git clone https://github.com/Argmaster/async_py_octocat.git Checking out main branch # Make sure we are on main branch. 1 git checkout main Pull changes from origin # Hint You can skip this step if you just cloned the repository 1 git pull --ff Create feature branch # Create new branch for our feature called (replace with whatever you want) feature_name . feature/ prefix is required because of convention. Learn about branches 1 git checkout -b feature/feature_name Check repository status # 1 git status Result should be similar to this: 1 2 On branch feature/feature_name nothing to commit, working tree clean Commit-test-push cycle # Your work on a feature should be divided into many steps during which you will add new units to the system. Each unit should have a set of tests to verify its operation. Formatting & Quality checks # Run code quality checks with tox to quickly fix most obvious issues in your code. 1 tox -e check 1 tox -e check Run test suite for Python interpreter versions you have locally # Run test suites on available interpreters with 1 tox -e py37 If the tests fail, you have to repeat steps 1 and 2. Omission of the corrections will result in your changes being rejected by the CI tests executed for the pull request. Add all changes to staging area with # 1 git add * You can list file paths instead of using the asterisk symbol if you know you can add many unwanted files. If these unwanted files regularly appear in the codebase, add them to the .gitignore file. Check staging area # 1 git status If any files staged for commit shouldn't be there, unstage them with 1 git restore --staged <file> Commit changes # Now use commit command to send changes to git history 1 git commit This command will open text editor for you, waiting for commit description. You can use 1 git commit -m \"commit message\" to add commit title and omit long description. The commit title should not be longer than 50 characters. How to write a Git Commit Message Good Commit Messages: A Practical Git Guide Push changes to remote branch # 1 git push -u origin feature/feature_name For each subsequent push from this branch, you can omit -u origin feature/feature_name 1 git push Create pull request # Visit pull requests and create PR for you feature. Read in GitHub docs about pull requests. Request review & wait for CI checks # Now you can request a pull request review, as it's described here . Before your changes can be merged into another branch, at least one person should see them, and share their thoughts about them with you. If you are prompted to make corrections, do so immediately and do not apply your changes without fixes. Go back to Commit-test-push . You changes should also pass all tests ran by CI system ( Github Actions ). If the tests fail, corrections will also be required before continuing. Merge PR # After receiving a positive response from the reviewer and passing the tests, the pull request can be merged. About merge conflicts About pull request merges .","title":"Feature flow"},{"location":"develop/feature/#feature-flow","text":"This project uses GitHub flow as it's main workflow model. Simplified visualization can be seen on graph below: %%{init: { 'theme': 'forest' , 'themeVariables': { 'git0': '#4db85f', 'git1': '#49b391', 'git2': '#59a7ff', 'git3': '#d93261', 'git4': '#00ffff', 'git5': '#ffff00', 'git6': '#ff00ff', 'git7': '#00ffff' } } }%% gitGraph commit tag:\"0.0.0\" branch feature checkout feature branch private checkout private commit commit checkout feature merge private branch private2 checkout private2 commit commit checkout feature merge private2 commit tag:\"1.0.0\" checkout main merge feature","title":"Feature flow"},{"location":"develop/feature/#clone-repository","text":"Hint You can skip this step if you already have a clone 1 git clone https://github.com/Argmaster/async_py_octocat.git","title":"Clone repository"},{"location":"develop/feature/#checking-out-main-branch","text":"Make sure we are on main branch. 1 git checkout main","title":"Checking out main branch"},{"location":"develop/feature/#pull-changes-from-origin","text":"Hint You can skip this step if you just cloned the repository 1 git pull --ff","title":"Pull changes from origin"},{"location":"develop/feature/#create-feature-branch","text":"Create new branch for our feature called (replace with whatever you want) feature_name . feature/ prefix is required because of convention. Learn about branches 1 git checkout -b feature/feature_name","title":"Create feature branch"},{"location":"develop/feature/#check-repository-status","text":"1 git status Result should be similar to this: 1 2 On branch feature/feature_name nothing to commit, working tree clean","title":"Check repository status"},{"location":"develop/feature/#commit-test-push-cycle","text":"Your work on a feature should be divided into many steps during which you will add new units to the system. Each unit should have a set of tests to verify its operation.","title":"Commit-test-push cycle"},{"location":"develop/feature/#formatting-quality-checks","text":"Run code quality checks with tox to quickly fix most obvious issues in your code. 1 tox -e check 1 tox -e check","title":"Formatting &amp; Quality checks"},{"location":"develop/feature/#run-test-suite-for-python-interpreter-versions-you-have-locally","text":"Run test suites on available interpreters with 1 tox -e py37 If the tests fail, you have to repeat steps 1 and 2. Omission of the corrections will result in your changes being rejected by the CI tests executed for the pull request.","title":"Run test suite for Python interpreter versions you have locally"},{"location":"develop/feature/#add-all-changes-to-staging-area-with","text":"1 git add * You can list file paths instead of using the asterisk symbol if you know you can add many unwanted files. If these unwanted files regularly appear in the codebase, add them to the .gitignore file.","title":"Add all changes to staging area with"},{"location":"develop/feature/#check-staging-area","text":"1 git status If any files staged for commit shouldn't be there, unstage them with 1 git restore --staged <file>","title":"Check staging area"},{"location":"develop/feature/#commit-changes","text":"Now use commit command to send changes to git history 1 git commit This command will open text editor for you, waiting for commit description. You can use 1 git commit -m \"commit message\" to add commit title and omit long description. The commit title should not be longer than 50 characters. How to write a Git Commit Message Good Commit Messages: A Practical Git Guide","title":"Commit changes"},{"location":"develop/feature/#push-changes-to-remote-branch","text":"1 git push -u origin feature/feature_name For each subsequent push from this branch, you can omit -u origin feature/feature_name 1 git push","title":"Push changes to remote branch"},{"location":"develop/feature/#create-pull-request","text":"Visit pull requests and create PR for you feature. Read in GitHub docs about pull requests.","title":"Create pull request"},{"location":"develop/feature/#request-review-wait-for-ci-checks","text":"Now you can request a pull request review, as it's described here . Before your changes can be merged into another branch, at least one person should see them, and share their thoughts about them with you. If you are prompted to make corrections, do so immediately and do not apply your changes without fixes. Go back to Commit-test-push . You changes should also pass all tests ran by CI system ( Github Actions ). If the tests fail, corrections will also be required before continuing.","title":"Request review &amp; wait for CI checks"},{"location":"develop/feature/#merge-pr","text":"After receiving a positive response from the reviewer and passing the tests, the pull request can be merged. About merge conflicts About pull request merges .","title":"Merge PR"},{"location":"develop/formatting/","text":"Code formatting # black # black is the uncompromising Python code formatter. By using it, you agree to cede control over minutiae of hand-formatting. In return, black gives you speed, determinism, and freedom from pycodestyle nagging about formatting. You will save time and mental energy for more important matters. You can view black configuration in pyproject.toml file, in [tool.black] section. Manual usage valid for this project: 1 black . isort # isort your imports, so you don't have to. isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type. You can view isort configuration in .isort.cfg file. Manual usage valid for this project: 1 isort . docformatter # docformatter currently automatically formats docstrings to follow a subset of the PEP 257 conventions. Below are the relevant items quoted from PEP 257. For consistency, always use triple double quotes around docstrings. Triple quotes are used even though the string fits on one line. Multi-line docstrings consist of a summary line just like a one-line docstring, followed by a blank line, followed by a more elaborate description. Unless the entire docstring fits on a line, place the closing quotes on a line by themselves. docformatter also handles some of the PEP 8 conventions. Don\u2019t write string literals that rely on significant trailing whitespace. Such trailing whitespace is visually indistinguishable and some editors (or more recently, reindent.py) will trim them. Manual usage valid for this project: 1 docformatter -r source/ scripts/ --in-place --docstring-length 75 75 -e .tox,.eggs,build,dist,typings,.temp","title":"Formatting code"},{"location":"develop/formatting/#code-formatting","text":"","title":"Code formatting"},{"location":"develop/formatting/#black","text":"black is the uncompromising Python code formatter. By using it, you agree to cede control over minutiae of hand-formatting. In return, black gives you speed, determinism, and freedom from pycodestyle nagging about formatting. You will save time and mental energy for more important matters. You can view black configuration in pyproject.toml file, in [tool.black] section. Manual usage valid for this project: 1 black .","title":"black"},{"location":"develop/formatting/#isort","text":"isort your imports, so you don't have to. isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type. You can view isort configuration in .isort.cfg file. Manual usage valid for this project: 1 isort .","title":"isort"},{"location":"develop/formatting/#docformatter","text":"docformatter currently automatically formats docstrings to follow a subset of the PEP 257 conventions. Below are the relevant items quoted from PEP 257. For consistency, always use triple double quotes around docstrings. Triple quotes are used even though the string fits on one line. Multi-line docstrings consist of a summary line just like a one-line docstring, followed by a blank line, followed by a more elaborate description. Unless the entire docstring fits on a line, place the closing quotes on a line by themselves. docformatter also handles some of the PEP 8 conventions. Don\u2019t write string literals that rely on significant trailing whitespace. Such trailing whitespace is visually indistinguishable and some editors (or more recently, reindent.py) will trim them. Manual usage valid for this project: 1 docformatter -r source/ scripts/ --in-place --docstring-length 75 75 -e .tox,.eggs,build,dist,typings,.temp","title":"docformatter"},{"location":"develop/quality_checks/","text":"Code quality checks # Running single test file To run single test file with pytest 1 pytest tests/test_folder/test_feature.py -rP You can select single test too 1 pytest tests/test_folder/test_feature.py -rP -k test_name flake8 # Flake8 is a wrapper around these tools: PyFlakes which checks Python source files for errors. pycodestyle , a tool to check your Python code against some of the style conventions in PEP 8. Ned Batchelder\u2019s McCabe script for checking McCabe complexity. See list of awesome flake8 plugins List of included 3rd-party plugins: flake8-alfred - warn on unsafe/obsolete symbols. flake8-alphabetize - checker for alphabetizing import and all . flake8-broken-line - forbid backslashes for line breaks. flake8-bugbear - finding likely bugs and design problems in your program. flake8-builtins - check for python builtins being used as variables or parameters. flake8-comprehensions - check for invalid list/set/dict comprehensions. flake8-docstrings - uses pydocstyle to check docstrings flake8-eradicate - find commented out (or so called \"dead\") code. flake8-functions - report on issues with functions. flake8-functions-names - validates function names, decomposition and conformity with annotations. Conventions from here and here . flake8-printf-formatting - forbids printf-style string formatting flake8-pytest-style - checking common style issues or inconsistencies with pytest-based tests. flake8-simplify - helps you simplify your code. pep8-naming - check your code against PEP 8 naming conventions. flake8-expression-complexity - validates expression complexity and stops you from creating monstrous multi-line expressions. flake8-cognitive-complexity - validates cognitive functions complexity. pre-commit # A framework for managing and maintaining multi-language pre-commit hooks. Git hook scripts are useful for identifying simple issues before submission to code review. We run our hooks on every commit to automatically point out issues in code such as missing semicolons, trailing whitespace, and debug statements. By pointing these issues out before code review, this allows a code reviewer to focus on the architecture of a change while not wasting time with trivial style nitpicks. List of hooks # isort black flake8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - flake8-alfred - flake8-alphabetize - flake8-broken-line - flake8-bugbear - flake8-builtins - flake8-comprehensions - flake8-docstrings - flake8-eradicate - flake8-functions - flake8-functions-names - flake8-printf-formatting - flake8-pytest-style - flake8-simplify - pep8-naming - flake8-cognitive-complexity - flake8-expression-complexity docformatter pre-commit-hooks 1 2 3 4 5 6 7 - trailing-whitespace - end-of-file-fixer - debug-statements - check-added-large-file - no-commit-to-branch - requirements-txt-fixer - trailing-whitespace","title":"Quality checks"},{"location":"develop/quality_checks/#code-quality-checks","text":"Running single test file To run single test file with pytest 1 pytest tests/test_folder/test_feature.py -rP You can select single test too 1 pytest tests/test_folder/test_feature.py -rP -k test_name","title":"Code quality checks"},{"location":"develop/quality_checks/#flake8","text":"Flake8 is a wrapper around these tools: PyFlakes which checks Python source files for errors. pycodestyle , a tool to check your Python code against some of the style conventions in PEP 8. Ned Batchelder\u2019s McCabe script for checking McCabe complexity. See list of awesome flake8 plugins List of included 3rd-party plugins: flake8-alfred - warn on unsafe/obsolete symbols. flake8-alphabetize - checker for alphabetizing import and all . flake8-broken-line - forbid backslashes for line breaks. flake8-bugbear - finding likely bugs and design problems in your program. flake8-builtins - check for python builtins being used as variables or parameters. flake8-comprehensions - check for invalid list/set/dict comprehensions. flake8-docstrings - uses pydocstyle to check docstrings flake8-eradicate - find commented out (or so called \"dead\") code. flake8-functions - report on issues with functions. flake8-functions-names - validates function names, decomposition and conformity with annotations. Conventions from here and here . flake8-printf-formatting - forbids printf-style string formatting flake8-pytest-style - checking common style issues or inconsistencies with pytest-based tests. flake8-simplify - helps you simplify your code. pep8-naming - check your code against PEP 8 naming conventions. flake8-expression-complexity - validates expression complexity and stops you from creating monstrous multi-line expressions. flake8-cognitive-complexity - validates cognitive functions complexity.","title":"flake8"},{"location":"develop/quality_checks/#pre-commit","text":"A framework for managing and maintaining multi-language pre-commit hooks. Git hook scripts are useful for identifying simple issues before submission to code review. We run our hooks on every commit to automatically point out issues in code such as missing semicolons, trailing whitespace, and debug statements. By pointing these issues out before code review, this allows a code reviewer to focus on the architecture of a change while not wasting time with trivial style nitpicks.","title":"pre-commit"},{"location":"develop/quality_checks/#list-of-hooks","text":"isort black flake8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - flake8-alfred - flake8-alphabetize - flake8-broken-line - flake8-bugbear - flake8-builtins - flake8-comprehensions - flake8-docstrings - flake8-eradicate - flake8-functions - flake8-functions-names - flake8-printf-formatting - flake8-pytest-style - flake8-simplify - pep8-naming - flake8-cognitive-complexity - flake8-expression-complexity docformatter pre-commit-hooks 1 2 3 4 5 6 7 - trailing-whitespace - end-of-file-fixer - debug-statements - check-added-large-file - no-commit-to-branch - requirements-txt-fixer - trailing-whitespace","title":"List of hooks"},{"location":"develop/tox_basics/","text":"Tox basics # A virtual environment is a Python environment such that the Python interpreter, libraries and scripts installed into it are isolated from those installed in other virtual environments, and (by default) any libraries installed in a \u201csystem\u201d Python, i.e., one which is installed as part of your operating system. What is tox? # tox is a generic virtualenv management and test command line tool you can use for: checking that your package installs correctly with different Python versions and interpreters running your tests in each of the environments, configuring your test tool of choice acting as a frontend to Continuous Integration servers, greatly reducing boilerplate and merging CI and shell-based testing. Handy Links # To read more about tox, visit it's documentation. tox global settings tox environments configuration tox substitutions Generating environments, conditional settings Environmental variables Full tox cli documentation tox examples Our perspective # Every complex Python project requires multiple tools for development and deployment. Those are mostly related to test suite running, checking quality of code, developing and building documentation and building distribution packages. Usually those are tedious tasks and they are at the top of the lists of tasks to automate. Here comes tox tox can be used as a reliable replacement for manually written scripts. It's designed to run predefined series of command in automatically generated Python virtual environment. It was designed for Python ecosystem and is widely used along Python projects. It is compatible with other Python tools out of the box. All the configuration is contained in tox.ini file and is completely static. Basic usage # To invoke single environment with tox you have to memorize one simple command: 1 tox -e envname Where envname is replaced 1:1 with name of any environments listed below. Info You can also use tox command without any arguments to run checks for all supported python versions. Be aware that it is really time consuming. List of all configured environments # Simplicity of creating tox managed environments allows us to create highly specialized environments with minimal boilerplate. devenv # Stands for development environment (important when using IDE like Visual Studio Code or PyCharm). When selecting interpreter for your IDE, devenv is a right one to pick. This environment is meant to contain all tools important for continuos development including linters, formatters, building tools, packaging tools and everything else listed in requirements-dev.txt It is really heavy and expensive to create because of complexity of installation. Every call of tox -e devenv will completely recreate the environment. Danger Running tox -e devenv completely reinstalls environment - it's time consuming. It is designed in such way many due to the fact that during development there is no need to recreate it until something brakes, and then it's handy to simplify reinstallation how much possible. Hint Running this environment will install pre-commit. To select Python from devenv as interpreter in Visual Studio Code, use Ctrl + Shift + P and type Python: Select Interpreter , then hit Enter , select Enter interpreter path , pick Find and navigate to python.exe in .tox/devenv/bin (unix) or .tox/devev/scripts (windows). This environment is rather bullet proof in comparison to other non-utility environments (mainly test runners). It should just install on demand, and every failure should be considered and fixed permanently. List of included dependencies: requirement.txt 1 2 3 4 5 6 packaging> = 21.3.0,<21.4.0 rich> = 12.0.0,<12.1.0 pydantic> = 1.9.0,<1.10.0 aiohttp> = 3.8,<3.9 backports.cached-property> = 1.0,<1.1 typing_extensions> = 4.2,<4.3 requirement-test.txt 1 2 3 4 5 6 7 8 9 10 # Pytest + plugins pytest = =7.1.2 pytest-flake8 = =1.1.1 pytest-cov = =3.0.0 pytest-asyncio = =0.18.3 # Hypothesis https://hypothesis.readthedocs.io/en/latest/data.html hypothesis> = 6.46.0,<6.47.0 # Static typechecking mypy = =0.950 lxml = =4.8.0 requirement-dev.txt 1 2 3 4 5 -r requirements.txt -r requirements-check.txt -r requirements-docs.txt -r requirements-min.txt -r requirements-test.txt check # Runs formatters and code quality checkers over your workspace. This environment is lightweight compared to devenv because it installs dependencies once and completely skips installing a package from this repository as it does not need it. The operations performed by this environment are performed in place. Info This environment is lightweight, running tox -e check often is fine. Similarly to devenv it is bullet proof in comparison to other non-utility environments (mainly test runners). It should just install on demand, and every failure should be considered and fixed permanently. pyXY # Warning pyXY - test runner envs - they require special care and you are responsible for their well being. Executes full test suite with corresponding Python interpreter version, denoted by XX numbers. All available ones are: py37 py38 py39 py310 List of included dependencies: requirement.txt 1 2 3 4 5 6 packaging> = 21.3.0,<21.4.0 rich> = 12.0.0,<12.1.0 pydantic> = 1.9.0,<1.10.0 aiohttp> = 3.8,<3.9 backports.cached-property> = 1.0,<1.1 typing_extensions> = 4.2,<4.3 requirement-test.txt 1 2 3 4 5 6 7 8 9 10 # Pytest + plugins pytest = =7.1.2 pytest-flake8 = =1.1.1 pytest-cov = =3.0.0 pytest-asyncio = =0.18.3 # Hypothesis https://hypothesis.readthedocs.io/en/latest/data.html hypothesis> = 6.46.0,<6.47.0 # Static typechecking mypy = =0.950 lxml = =4.8.0 mypy # Runs mypy over Python codebase to perform static type analysis. docs # Builds documentation with mkdocs, all generated files are saved to site/ folder. build-all # Builds package distribution wheels for corresponding Python version or all versions. build-all build-py37 build-py38 build-py39 build-py310 Environments with build prefix are responsible for building release packages for corresponding python versions ( build-py37 builds for Python 3.7 etc.) For each test environment ( py37 etc.) there is a corresponding build environment. Built packages (wheels) are stored in dist/ directory. Name tags list # 1 2 3 4 5 6 7 8 9 10 11 12 13 devenv docs check py37 py38 py39 py310 mypy build-all build-py37 build-py38 build-py39 build-py310","title":"Tox basics"},{"location":"develop/tox_basics/#tox-basics","text":"A virtual environment is a Python environment such that the Python interpreter, libraries and scripts installed into it are isolated from those installed in other virtual environments, and (by default) any libraries installed in a \u201csystem\u201d Python, i.e., one which is installed as part of your operating system.","title":"Tox basics"},{"location":"develop/tox_basics/#what-is-tox","text":"tox is a generic virtualenv management and test command line tool you can use for: checking that your package installs correctly with different Python versions and interpreters running your tests in each of the environments, configuring your test tool of choice acting as a frontend to Continuous Integration servers, greatly reducing boilerplate and merging CI and shell-based testing.","title":"What is tox?"},{"location":"develop/tox_basics/#handy-links","text":"To read more about tox, visit it's documentation. tox global settings tox environments configuration tox substitutions Generating environments, conditional settings Environmental variables Full tox cli documentation tox examples","title":"Handy Links"},{"location":"develop/tox_basics/#our-perspective","text":"Every complex Python project requires multiple tools for development and deployment. Those are mostly related to test suite running, checking quality of code, developing and building documentation and building distribution packages. Usually those are tedious tasks and they are at the top of the lists of tasks to automate. Here comes tox tox can be used as a reliable replacement for manually written scripts. It's designed to run predefined series of command in automatically generated Python virtual environment. It was designed for Python ecosystem and is widely used along Python projects. It is compatible with other Python tools out of the box. All the configuration is contained in tox.ini file and is completely static.","title":"Our perspective"},{"location":"develop/tox_basics/#basic-usage","text":"To invoke single environment with tox you have to memorize one simple command: 1 tox -e envname Where envname is replaced 1:1 with name of any environments listed below. Info You can also use tox command without any arguments to run checks for all supported python versions. Be aware that it is really time consuming.","title":"Basic usage"},{"location":"develop/tox_basics/#list-of-all-configured-environments","text":"Simplicity of creating tox managed environments allows us to create highly specialized environments with minimal boilerplate.","title":"List of all configured environments"},{"location":"develop/tox_basics/#devenv","text":"Stands for development environment (important when using IDE like Visual Studio Code or PyCharm). When selecting interpreter for your IDE, devenv is a right one to pick. This environment is meant to contain all tools important for continuos development including linters, formatters, building tools, packaging tools and everything else listed in requirements-dev.txt It is really heavy and expensive to create because of complexity of installation. Every call of tox -e devenv will completely recreate the environment. Danger Running tox -e devenv completely reinstalls environment - it's time consuming. It is designed in such way many due to the fact that during development there is no need to recreate it until something brakes, and then it's handy to simplify reinstallation how much possible. Hint Running this environment will install pre-commit. To select Python from devenv as interpreter in Visual Studio Code, use Ctrl + Shift + P and type Python: Select Interpreter , then hit Enter , select Enter interpreter path , pick Find and navigate to python.exe in .tox/devenv/bin (unix) or .tox/devev/scripts (windows). This environment is rather bullet proof in comparison to other non-utility environments (mainly test runners). It should just install on demand, and every failure should be considered and fixed permanently. List of included dependencies: requirement.txt 1 2 3 4 5 6 packaging> = 21.3.0,<21.4.0 rich> = 12.0.0,<12.1.0 pydantic> = 1.9.0,<1.10.0 aiohttp> = 3.8,<3.9 backports.cached-property> = 1.0,<1.1 typing_extensions> = 4.2,<4.3 requirement-test.txt 1 2 3 4 5 6 7 8 9 10 # Pytest + plugins pytest = =7.1.2 pytest-flake8 = =1.1.1 pytest-cov = =3.0.0 pytest-asyncio = =0.18.3 # Hypothesis https://hypothesis.readthedocs.io/en/latest/data.html hypothesis> = 6.46.0,<6.47.0 # Static typechecking mypy = =0.950 lxml = =4.8.0 requirement-dev.txt 1 2 3 4 5 -r requirements.txt -r requirements-check.txt -r requirements-docs.txt -r requirements-min.txt -r requirements-test.txt","title":"devenv"},{"location":"develop/tox_basics/#check","text":"Runs formatters and code quality checkers over your workspace. This environment is lightweight compared to devenv because it installs dependencies once and completely skips installing a package from this repository as it does not need it. The operations performed by this environment are performed in place. Info This environment is lightweight, running tox -e check often is fine. Similarly to devenv it is bullet proof in comparison to other non-utility environments (mainly test runners). It should just install on demand, and every failure should be considered and fixed permanently.","title":"check"},{"location":"develop/tox_basics/#pyxy","text":"Warning pyXY - test runner envs - they require special care and you are responsible for their well being. Executes full test suite with corresponding Python interpreter version, denoted by XX numbers. All available ones are: py37 py38 py39 py310 List of included dependencies: requirement.txt 1 2 3 4 5 6 packaging> = 21.3.0,<21.4.0 rich> = 12.0.0,<12.1.0 pydantic> = 1.9.0,<1.10.0 aiohttp> = 3.8,<3.9 backports.cached-property> = 1.0,<1.1 typing_extensions> = 4.2,<4.3 requirement-test.txt 1 2 3 4 5 6 7 8 9 10 # Pytest + plugins pytest = =7.1.2 pytest-flake8 = =1.1.1 pytest-cov = =3.0.0 pytest-asyncio = =0.18.3 # Hypothesis https://hypothesis.readthedocs.io/en/latest/data.html hypothesis> = 6.46.0,<6.47.0 # Static typechecking mypy = =0.950 lxml = =4.8.0","title":"pyXY"},{"location":"develop/tox_basics/#mypy","text":"Runs mypy over Python codebase to perform static type analysis.","title":"mypy"},{"location":"develop/tox_basics/#docs","text":"Builds documentation with mkdocs, all generated files are saved to site/ folder.","title":"docs"},{"location":"develop/tox_basics/#build-all","text":"Builds package distribution wheels for corresponding Python version or all versions. build-all build-py37 build-py38 build-py39 build-py310 Environments with build prefix are responsible for building release packages for corresponding python versions ( build-py37 builds for Python 3.7 etc.) For each test environment ( py37 etc.) there is a corresponding build environment. Built packages (wheels) are stored in dist/ directory.","title":"build-all"},{"location":"develop/tox_basics/#name-tags-list","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 devenv docs check py37 py38 py39 py310 mypy build-all build-py37 build-py38 build-py39 build-py310","title":"Name tags list"},{"location":"howto/env_in_vsc/","text":"Open VSCode in your repository folder Use Ctrl+Shift+P to open command entry Enter >Python: Select Interpreter and click Enter Select option \"Enter interpreter path...\" Select option \"Find...\" Navigate to Windows: async_py_octocat/.tox/devenv/Scripts/python.exe Linux: async_py_octocat/.tox/devenv/bin/python Select file python.exe Use Ctrl+Shift+P to open command entry Enter >Developer: Reload Window and click Enter Open terminal by pulling from edge of status bar Use trash can icon to kill it Repeat step 11. Now you should have (devenv) prefix before your command prompt If you don't have this prefix, manually activate environment: - Windows: \".tox/devenv/Script/activate\" - Linux: source \".tox/devenv/bin/activate\" - for more see this","title":"Set up environment in VSC"},{"location":"howto/set_up_vsc/","text":"HowTo set up Visual Studio Code for development # Make sure you have following extensions installed: Python Pylance YAML GitLens \u2014 Git supercharged indent-rainbow Test Explorer UI Test Explorer UI Use Ctrl+Shift+P to open VSC command prompt Enter >Preferences: Open Settings (UI) and click Enter to open Settings tab For all following use setting search field: Type Files: Auto Save and select option afterDelay Type Python: Language Server and select Pylance Type Files: Auto Save Delay and set value delay value to 1000 Type Python > Analysis: Diagnostic Mode and set value to workspace Type Python > Analysis: Extra Paths and use Add item to add ./source/ Type Python > Formatting: Provider and set it to black Type Python > Linting: Flake8 Enabled and check it Type Python > Linting: Pylint Enabled and uncheck it Type Docstring Format and select numpy Type Python > Analysis: Type Checking Mode and set to basic Type Indent Rainbow: Colors and check option Color On Whitespace Only : Type Indent Rainbow: Colors and in section Colors use Edit in settings.json to enter settings in json form, then use following to update \"indentRainbow.colors\" section: 1 2 3 4 5 6 7 8 9 \"indentRainbow.colors\": [ \"rgba(255,255,255,0.02)\", \"rgba(255,255,255,0.04)\", \"rgba(255,255,255,0.055)\", \"rgba(255,255,255,0.07)\", \"rgba(255,255,255,0.085)\", \"rgba(255,255,255,0.10)\", \"rgba(255,255,255,0.115)\" ]","title":"Set up Visual Studio Code"},{"location":"howto/set_up_vsc/#howto-set-up-visual-studio-code-for-development","text":"Make sure you have following extensions installed: Python Pylance YAML GitLens \u2014 Git supercharged indent-rainbow Test Explorer UI Test Explorer UI Use Ctrl+Shift+P to open VSC command prompt Enter >Preferences: Open Settings (UI) and click Enter to open Settings tab For all following use setting search field: Type Files: Auto Save and select option afterDelay Type Python: Language Server and select Pylance Type Files: Auto Save Delay and set value delay value to 1000 Type Python > Analysis: Diagnostic Mode and set value to workspace Type Python > Analysis: Extra Paths and use Add item to add ./source/ Type Python > Formatting: Provider and set it to black Type Python > Linting: Flake8 Enabled and check it Type Python > Linting: Pylint Enabled and uncheck it Type Docstring Format and select numpy Type Python > Analysis: Type Checking Mode and set to basic Type Indent Rainbow: Colors and check option Color On Whitespace Only : Type Indent Rainbow: Colors and in section Colors use Edit in settings.json to enter settings in json form, then use following to update \"indentRainbow.colors\" section: 1 2 3 4 5 6 7 8 9 \"indentRainbow.colors\": [ \"rgba(255,255,255,0.02)\", \"rgba(255,255,255,0.04)\", \"rgba(255,255,255,0.055)\", \"rgba(255,255,255,0.07)\", \"rgba(255,255,255,0.085)\", \"rgba(255,255,255,0.10)\", \"rgba(255,255,255,0.115)\" ]","title":"HowTo set up Visual Studio Code for development"},{"location":"howto/tox_devenv/","text":"Acquire Python interpreter version 3.8 from Python.org or with package manager. Downloads section Last Executable Windows Release Note Remember to add Python to PATH. Install tox with pip 1 python -m pip install tox Create virtual environment with tox: 1 python -m tox -e devenv Activate environment: Windows: \".tox/devenv/Scripts/activate\" Linux: source \".tox/devenv/bin/activate\" for more see this Info If you are using Powershell you may encounter this problem .","title":"Set up tox for development"},{"location":"reference/github/","text":"Bases: AbstractAsyncContextManager Source code in async_py_octocat/_github.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 class GitHub ( AbstractAsyncContextManager ): username : str token : str is_token_auth : bool session : GitHubSession _user : Optional [ User ] def __init__ ( self , username : str , token : str , is_token_auth : bool = False ) -> None : \"\"\"Async GitHub client. All async calls to methods of this object and objects created with calls to methods of instance of this object should be done within async with code block. Objects created by this objects are bound to this object and are able to communicate with Github API only by this object session (async with block) unless manually rebound to different object. Parameters ---------- username : str Github account user name. token : str Access token for same account as username was. is_token_auth : bool, optional When True, token only authentication is used, basic auth otherwise, by default False \"\"\" self . username = username self . token = token self . is_token_auth = is_token_auth self . _user = None self . session = GitHubSession ( self . username , self . token , self . is_token_auth ) async def __aenter__ ( self ) -> GitHub : await self . session . __aenter__ () self . _user = await self . session . get_user () return self async def __aexit__ ( self , exc_type : Optional [ Type [ BaseException ]], exc_val : Optional [ BaseException ], exc_tb : Optional [ TracebackType ], ) -> None : return await self . session . __aexit__ ( exc_type , exc_val , exc_tb ) def get_gh_session ( self ) -> GitHubSession : return self . session async def user ( self , username : Optional [ str ] = None ) -> User : \"\"\"Request github user details from Github API. This function requires internet connection, thus have to be called within `async` `with` block. Parameters ---------- username : Optional[str], optional Login of user to acquire, when none, details for currently authenticated user are returned. Returns ------- User Wrapper object containing user details and allowing for further API interaction. \"\"\" if username is None : if self . _user is None : # pragma: no cover self . _user = await self . session . get_user () assert self . _user is not None return self . _user else : user = await self . session . get_user ( username ) return user async def repository ( self , user_name : str , repo_name : str ) -> Repository : \"\"\"Request github repository owned by `user_name` with name `repo_name`. It is alternative to first requesting user and then requesting repo using User object API. Parameters ---------- user_name : str Name of owner of repo. repo_name : str Name of repository requested. Returns ------- Repository Wrapper object containing details of repo and allowing for further API interaction. \"\"\" return await self . session . get_repo ( user_name , repo_name ) __init__ ( username , token , is_token_auth = False ) # Async GitHub client. All async calls to methods of this object and objects created with calls to methods of instance of this object should be done within async with code block. Objects created by this objects are bound to this object and are able to communicate with Github API only by this object session (async with block) unless manually rebound to different object. Parameters: Name Type Description Default username str Github account user name. required token str Access token for same account as username was. required is_token_auth bool , optional When True, token only authentication is used, basic auth otherwise, by default False False Source code in async_py_octocat/_github.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def __init__ ( self , username : str , token : str , is_token_auth : bool = False ) -> None : \"\"\"Async GitHub client. All async calls to methods of this object and objects created with calls to methods of instance of this object should be done within async with code block. Objects created by this objects are bound to this object and are able to communicate with Github API only by this object session (async with block) unless manually rebound to different object. Parameters ---------- username : str Github account user name. token : str Access token for same account as username was. is_token_auth : bool, optional When True, token only authentication is used, basic auth otherwise, by default False \"\"\" self . username = username self . token = token self . is_token_auth = is_token_auth self . _user = None self . session = GitHubSession ( self . username , self . token , self . is_token_auth ) repository ( user_name , repo_name ) async # Request github repository owned by user_name with name repo_name . It is alternative to first requesting user and then requesting repo using User object API. Parameters: Name Type Description Default user_name str Name of owner of repo. required repo_name str Name of repository requested. required Returns: Type Description Repository Wrapper object containing details of repo and allowing for further API interaction. Source code in async_py_octocat/_github.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 async def repository ( self , user_name : str , repo_name : str ) -> Repository : \"\"\"Request github repository owned by `user_name` with name `repo_name`. It is alternative to first requesting user and then requesting repo using User object API. Parameters ---------- user_name : str Name of owner of repo. repo_name : str Name of repository requested. Returns ------- Repository Wrapper object containing details of repo and allowing for further API interaction. \"\"\" return await self . session . get_repo ( user_name , repo_name ) user ( username = None ) async # Request github user details from Github API. This function requires internet connection, thus have to be called within async with block. Parameters: Name Type Description Default username Optional [ str ], optional Login of user to acquire, when none, details for currently authenticated user are returned. None Returns: Type Description User Wrapper object containing user details and allowing for further API interaction. Source code in async_py_octocat/_github.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 async def user ( self , username : Optional [ str ] = None ) -> User : \"\"\"Request github user details from Github API. This function requires internet connection, thus have to be called within `async` `with` block. Parameters ---------- username : Optional[str], optional Login of user to acquire, when none, details for currently authenticated user are returned. Returns ------- User Wrapper object containing user details and allowing for further API interaction. \"\"\" if username is None : if self . _user is None : # pragma: no cover self . _user = await self . session . get_user () assert self . _user is not None return self . _user else : user = await self . session . get_user ( username ) return user","title":"class GitHub"},{"location":"reference/github/#async_py_octocat._github.GitHub.__init__","text":"Async GitHub client. All async calls to methods of this object and objects created with calls to methods of instance of this object should be done within async with code block. Objects created by this objects are bound to this object and are able to communicate with Github API only by this object session (async with block) unless manually rebound to different object. Parameters: Name Type Description Default username str Github account user name. required token str Access token for same account as username was. required is_token_auth bool , optional When True, token only authentication is used, basic auth otherwise, by default False False Source code in async_py_octocat/_github.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def __init__ ( self , username : str , token : str , is_token_auth : bool = False ) -> None : \"\"\"Async GitHub client. All async calls to methods of this object and objects created with calls to methods of instance of this object should be done within async with code block. Objects created by this objects are bound to this object and are able to communicate with Github API only by this object session (async with block) unless manually rebound to different object. Parameters ---------- username : str Github account user name. token : str Access token for same account as username was. is_token_auth : bool, optional When True, token only authentication is used, basic auth otherwise, by default False \"\"\" self . username = username self . token = token self . is_token_auth = is_token_auth self . _user = None self . session = GitHubSession ( self . username , self . token , self . is_token_auth )","title":"__init__()"},{"location":"reference/github/#async_py_octocat._github.GitHub.repository","text":"Request github repository owned by user_name with name repo_name . It is alternative to first requesting user and then requesting repo using User object API. Parameters: Name Type Description Default user_name str Name of owner of repo. required repo_name str Name of repository requested. required Returns: Type Description Repository Wrapper object containing details of repo and allowing for further API interaction. Source code in async_py_octocat/_github.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 async def repository ( self , user_name : str , repo_name : str ) -> Repository : \"\"\"Request github repository owned by `user_name` with name `repo_name`. It is alternative to first requesting user and then requesting repo using User object API. Parameters ---------- user_name : str Name of owner of repo. repo_name : str Name of repository requested. Returns ------- Repository Wrapper object containing details of repo and allowing for further API interaction. \"\"\" return await self . session . get_repo ( user_name , repo_name )","title":"repository()"},{"location":"reference/github/#async_py_octocat._github.GitHub.user","text":"Request github user details from Github API. This function requires internet connection, thus have to be called within async with block. Parameters: Name Type Description Default username Optional [ str ], optional Login of user to acquire, when none, details for currently authenticated user are returned. None Returns: Type Description User Wrapper object containing user details and allowing for further API interaction. Source code in async_py_octocat/_github.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 async def user ( self , username : Optional [ str ] = None ) -> User : \"\"\"Request github user details from Github API. This function requires internet connection, thus have to be called within `async` `with` block. Parameters ---------- username : Optional[str], optional Login of user to acquire, when none, details for currently authenticated user are returned. Returns ------- User Wrapper object containing user details and allowing for further API interaction. \"\"\" if username is None : if self . _user is None : # pragma: no cover self . _user = await self . session . get_user () assert self . _user is not None return self . _user else : user = await self . session . get_user ( username ) return user","title":"user()"},{"location":"reference/repository/","text":"Bases: Interactive Source code in async_py_octocat/_rest/models/_repository.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 class Repository ( Interactive ): id : int # noqa: A003 node_id : str name : str full_name : str owner : user . User private : bool html_url : HttpUrl description : str fork : bool url : HttpUrl archive_url : HttpUrl assignees_url : HttpUrl blobs_url : HttpUrl branches_url : HttpUrl collaborators_url : HttpUrl comments_url : HttpUrl commits_url : HttpUrl compare_url : HttpUrl contents_url : HttpUrl contributors_url : HttpUrl deployments_url : HttpUrl downloads_url : HttpUrl events_url : HttpUrl forks_url : HttpUrl git_commits_url : HttpUrl git_refs_url : HttpUrl git_tags_url : HttpUrl git_url : str issue_comment_url : HttpUrl issue_events_url : HttpUrl issues_url : HttpUrl keys_url : HttpUrl labels_url : HttpUrl languages_url : HttpUrl merges_url : HttpUrl milestones_url : HttpUrl notifications_url : HttpUrl pulls_url : HttpUrl releases_url : HttpUrl ssh_url : str stargazers_url : HttpUrl statuses_url : HttpUrl subscribers_url : HttpUrl subscription_url : HttpUrl tags_url : HttpUrl teams_url : HttpUrl trees_url : HttpUrl clone_url : HttpUrl mirror_url : Optional [ str ] hooks_url : HttpUrl svn_url : HttpUrl homepage : str language : Optional [ str ] forks_count : int forks : int stargazers_count : int watchers_count : int watchers : int size : int default_branch : str open_issues_count : int open_issues : int is_template : bool topics : List [ str ] has_issues : bool has_projects : bool has_wiki : bool has_pages : bool has_downloads : bool archived : bool disabled : bool visibility : Visibility pushed_at : datetime created_at : datetime updated_at : datetime permissions : Permissions allow_rebase_merge : Optional [ bool ] template_repository : Optional [ Repository ] temp_clone_token : str allow_squash_merge : Optional [ bool ] allow_auto_merge : Optional [ bool ] delete_branch_on_merge : Optional [ bool ] allow_merge_commit : Optional [ bool ] subscribers_count : int network_count : int license : Optional [ License ] # noqa: A003 organization : Optional [ Organization ] parent : Optional [ Repository ] source : Optional [ Repository ]","title":"class Repository"},{"location":"reference/user/","text":"Bases: Interactive User profile data wrapper & validator. Thanks to BaseModel inheritance, JSON data acquired from github api endpoint can be automatically dispatched and validated. Source code in async_py_octocat/_rest/models/_user.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 class User ( Interactive ): \"\"\"User profile data wrapper & validator. Thanks to BaseModel inheritance, JSON data acquired from github api endpoint can be automatically dispatched and validated. \"\"\" # public profile information: login : str id : int # noqa: A003 node_id : str avatar_url : str gravatar_id : str url : HttpUrl html_url : HttpUrl followers_url : HttpUrl following_url : HttpUrl gists_url : HttpUrl starred_url : HttpUrl subscriptions_url : HttpUrl organizations_url : HttpUrl repos_url : HttpUrl events_url : HttpUrl received_events_url : HttpUrl type : str # noqa: A003 site_admin : bool # fields not available in repository description name : str = Field ( default = None ) company : str = Field ( default = None ) blog : str = Field ( default = None ) location : str = Field ( default = None ) email : str = Field ( default = None ) hireable : str = Field ( default = None ) bio : str = Field ( default = None ) twitter_username : str = Field ( default = None ) public_repos : int = Field ( default = None ) public_gists : int = Field ( default = None ) followers : int = Field ( default = None ) following : int = Field ( default = None ) created_at : datetime = Field ( default = None ) updated_at : datetime = Field ( default = None ) # private profile information: private_gists : Optional [ int ] total_private_repos : Optional [ int ] owned_private_repos : Optional [ int ] disk_usage : Optional [ int ] collaborators : Optional [ int ] two_factor_authentication : Optional [ bool ] plan : Optional [ Plan ] async def repo ( self , name_or_url : Union [ str , HttpUrl ] ) -> _repository . Repository : \"\"\"Request repository details for this user. Alias: repository() Parameters ---------- name_or_url : Union[str, HttpUrl] Repository name or full github link to repository, Returns ------- Repository Repository wrapper object allowing for further interaction wit Github API. \"\"\" return await self . _fetch_repository ( name_or_url ) async def repository ( self , name_or_url : Union [ str , HttpUrl ] ) -> _repository . Repository : \"\"\"Request repository details for this user. Alias: repo() Parameters ---------- name_or_url : Union[str, HttpUrl] Repository name or full github link to repository, Returns ------- Repository Repository wrapper object allowing for further interaction wit Github API. \"\"\" return await self . _fetch_repository ( name_or_url ) async def _fetch_repository ( self , name_or_url : Union [ str , HttpUrl ] ) -> _repository . Repository : # decide whether url string or just name was given str_guarantee = str ( name_or_url ) if is_url ( str_guarantee ): repo_name = parse_repo_from ( str_guarantee ) . repo else : repo_name = str_guarantee repo = await self . get_gh_session () . get_repo ( self . login , repo_name ) return repo repo ( name_or_url ) async # Request repository details for this user. Alias: repository() Parameters: Name Type Description Default name_or_url Union [ str , HttpUrl ] Repository name or full github link to repository, required Returns: Type Description Repository Repository wrapper object allowing for further interaction wit Github API. Source code in async_py_octocat/_rest/models/_user.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 async def repo ( self , name_or_url : Union [ str , HttpUrl ] ) -> _repository . Repository : \"\"\"Request repository details for this user. Alias: repository() Parameters ---------- name_or_url : Union[str, HttpUrl] Repository name or full github link to repository, Returns ------- Repository Repository wrapper object allowing for further interaction wit Github API. \"\"\" return await self . _fetch_repository ( name_or_url ) repository ( name_or_url ) async # Request repository details for this user. Alias: repo() Parameters: Name Type Description Default name_or_url Union [ str , HttpUrl ] Repository name or full github link to repository, required Returns: Type Description Repository Repository wrapper object allowing for further interaction wit Github API. Source code in async_py_octocat/_rest/models/_user.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 async def repository ( self , name_or_url : Union [ str , HttpUrl ] ) -> _repository . Repository : \"\"\"Request repository details for this user. Alias: repo() Parameters ---------- name_or_url : Union[str, HttpUrl] Repository name or full github link to repository, Returns ------- Repository Repository wrapper object allowing for further interaction wit Github API. \"\"\" return await self . _fetch_repository ( name_or_url )","title":"class User"},{"location":"reference/user/#async_py_octocat._rest.models._user.User.repo","text":"Request repository details for this user. Alias: repository() Parameters: Name Type Description Default name_or_url Union [ str , HttpUrl ] Repository name or full github link to repository, required Returns: Type Description Repository Repository wrapper object allowing for further interaction wit Github API. Source code in async_py_octocat/_rest/models/_user.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 async def repo ( self , name_or_url : Union [ str , HttpUrl ] ) -> _repository . Repository : \"\"\"Request repository details for this user. Alias: repository() Parameters ---------- name_or_url : Union[str, HttpUrl] Repository name or full github link to repository, Returns ------- Repository Repository wrapper object allowing for further interaction wit Github API. \"\"\" return await self . _fetch_repository ( name_or_url )","title":"repo()"},{"location":"reference/user/#async_py_octocat._rest.models._user.User.repository","text":"Request repository details for this user. Alias: repo() Parameters: Name Type Description Default name_or_url Union [ str , HttpUrl ] Repository name or full github link to repository, required Returns: Type Description Repository Repository wrapper object allowing for further interaction wit Github API. Source code in async_py_octocat/_rest/models/_user.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 async def repository ( self , name_or_url : Union [ str , HttpUrl ] ) -> _repository . Repository : \"\"\"Request repository details for this user. Alias: repo() Parameters ---------- name_or_url : Union[str, HttpUrl] Repository name or full github link to repository, Returns ------- Repository Repository wrapper object allowing for further interaction wit Github API. \"\"\" return await self . _fetch_repository ( name_or_url )","title":"repository()"}]}